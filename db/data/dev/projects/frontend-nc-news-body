<h>Intro</h>

<note>
  (The backend api is hosted by a free provider - please wait a minute for live
  version to spin up, or try refreshing if it doesn't load)
</note>

<p>
  This website was built as part of the
  <b>Northcoders software development bootcamp</b> I attended. The project aimed
  to recreate a Reddit style <b>social news hub</b>. The main features of the
  site are articles which can be <b>organised by topic</b>, with each article
  having user-curated <b>ratings</b> and a <b>comments</b> section.
</p>

<p>
  Feel free to interact with rating and commenting functionality of the
  <a href="https://frontend-nc-news.netlify.app/">live site</a>.
</p>

<h>Planning</h>

<p>
  The website was built using <l>React</l>, and the first step was to
  <a
    href="https://github.com/robert-matthew-brooks/fe-nc-news/tree/main/planning"
    >plan all the routes</a
  >
  with wireframe models and component trees. Not only does this help solidify
  the layout and visual design, but considering <b>React state</b> variables and
  their location will while coding.
</p>

<p>
  For example, the following wireframe for displaying an article shows the
  <b>article content</b> and <b>comments</b> as two different sections (or
  <l>React</l> components), but both will need access to the
  <c>article_id</c> value so they can make requests to the data api. This means
  the <c>article_id</c> state variable should be stored in parent of these two
  sections (the &lt;main&gt; component) and passed down.
</p>

<img
  src="https://i.ibb.co/R7SytZ0/frontend-nc-news-1.png"
  alt="Wireframe and component tree"
/>
<caption>
  Wireframe and component tree for /api/article/:article_id
</caption>

<h>Responsive Layout</h>

<p>
  While designing the site, I aimed to make sure all the core features could be
  displayed on a small viewport, by using a <b>mobile first</b> approach. As the
  screen gets larger, I used <l>CSS</l> to render additional components in the
  available space, for example an additional content sidebar.
</p>

<p>
  You can use test this by using the device emulator in Chrome's F12 developer
  tools, or mobile testing sites such as
  <a
    href="http://www.responsinator.com/?url=https%3A%2F%2Ffrontend-nc-news.netlify.app%2Farticles"
    >Responsinator.com</a
  >. One feature I addressed with the mobile layout is the menu, which is
  operated by a hamburger icon on small screens.
</p>

<img
  src="https://i.ibb.co/h9jcpQy/frontend-nc-news-2.gif"
  alt="Hamburger menu opening and closing"
/>
<caption>
  Hamburger menu on small viewports
</caption>

<h>Accessibility</h>

<p>
  While building the website, there were several accessibility considerations I
  made:
</p>

<ul>
  <li>
    <b>High contrast colours</b> were used to make the text easier to read
  </li>
  <li>
    <b>Form labels</b> were used, so that input boxes such as for creating a
    comment could be easily interpreted by a screen reader
  </li>
  <li>
    <b>Landmark tags</b> were used wherever possible, for example
    <c>&lt;nav&gt;</c> instead of <c>&lt;div class="nav"&gt;</c>, which again
    easier for screen reader users to navigate a site
  </li>
  <li>
    <b>Alt tags</b> were used on images, so their meaning could be understood
    even if the image couldn't be seen
  </li>
</ul>

<h>Optimistic Data</h>

<p>
  A lot of the <b>interactive elements</b>, such as voting and commenting,
  involve <b>patching data</b> via the api. One of the problems with this is
  that when the user performs an action, let's say upvoting an article, the api
  needs to patch the data, request the updated data again, and display it on the
  frontend. This can cause a <b>noticeable delay</b>, and is not a smooth
  experience.
</p>

<img
  src="https://i.ibb.co/nch2LgJ/frontend-nc-news-3.png"
  alt="Updating api with no optimistic data"
/>
<caption>
  Waiting for the api causes a feedback delay
</caption>

<p>
  A solution is to use <b>optimistic data</b>. We can have a local state in
  <l>React</l> called <c>optimisticVotes</c>, which is initiall set to the value
  fetched from the api. When the user makes a vote, we can increment/decrement
  this number locally and display it (which is much faster), and send a patch
  request in the background. If the patch request fails, we can display an error
  message which will be delayed, but overall the user experience will be more
  responsive.
</p>

<img
  src="https://i.ibb.co/fY8XRn7/frontend-nc-news-4.png"
  alt="Updating api with optimistic data"
/>
<caption>
  Using local data causes no delay
</caption>

<p>
  In this project, I used optimistic data for <b>article voting</b>,
  <b>comment voting</b> and <b>posting a comment</b> - the new comment was
  pushed into a local <c>optimisticComments</c> array.
</p>

<h>Loading And Error States</h>

<p>
  In this project I made sure to provide feedback to the user when the site was
  waiting for a response from the api. The following extract shows how a loading
  state can be used to control a loading wheel:
</p>

<!--code
  const [article, setArticle] = useState({});
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    (async () => {
        setIsLoading(true);

        try {
            const { article } = await fetchArticle(articleId); // request this data from api
            setArticle(article);
        }
        catch(err) {
            console.log(err);
        }
        
        setIsLoading(false);
    })()
  }, []);

  return (
    <main>
      <Loading isLoading={isLoading}>
        <article>
          article.content
        </article>
      </Loading>
    </main>
  );
code-->
<caption>
  Article.jsx extract
</caption>

<p>
  While the api is fetching the data, the <c>isLoading</c> state is set to true.
  This state is passed to the returned <c>Loading</c> component, which is
  defined as:
</p>

<!--code
  export default Loading({isLoading, children}) {
    return (
      <>
        {children}
        <div className="loading" style={{visibility: isLoading ? visible : hidden }}>
          <img src={LoadingImg} alt="Loading content" />
        </div>
      </>
    );
  };
code-->
<caption>
  Loading.jsx
</caption>

<p>
  The <c>&lt;div className="loading"&gt;</c> tag is always present inside the
  <c>Loading</c> component, but it is only visible when the
  <c>isLoading</c> state is true. We can use <l>CSS</l> to make the div cover
  the parent, place a loading wheel image in the middle and have a translucent
  background:
</p>

<img
  src="https://i.ibb.co/JQzDw1w/frontend-nc-news-5.png"
  alt="Loading wheels"
/>
<caption>
  Don't adjust your set - example of loading wheels during an api request
</caption>

<p>
  The catch block can be expanded upon to allow different content to be rendered
  if there was an error while fetching data from the api:
</p>

<!--code
  const [isError, setIsError] = useState(false);

  ...

  catch(err) {
    console.log(err);
    setIsError(true);
  }

  ...

  if (isError) {
    return <p>There was an error...</p>
  }
  else {
    return <p>{article.content}</p>
  }
code-->
<caption>
  Article.jsx extract
</caption>

<h>Outro</h>

<p>
  I learned a lot during this project, particularly about the advantages and
  disadvantages of using <l>React</l> as a frontend framework. Unfortunately I
  didn't completely finish this project, and one area I'd improve given more
  time is the <b>user login</b>. Currently this is hard coded, but issues arise
  with making multiple votes, as these are not tracked per when the browser is
  refreshed.
</p>

<p>
  Another point to consider is the slow server spin up times when using a
  <l>SQL</l> server on Render. Although this is a backend api issue, but the
  <b>response time is very noticeable</b> in the frontend experience. If I was
  to make a similar project again, I would consider migrating the server to a
  different platform (eg <l>Supabase</l>).
</p>

<p>
  As a learning experience this has definitely been worthwhile, but rather than
  continue this project, I am going to start a similar project of building a
  <b>portfolio website</b> using the knowledge I've acquired about this tech
  stack.
</p>
