<h>Intro</h>

<note>
  (This api is hosted by a free provider - please wait a minute for live version
  to spin up, or try refreshing if it doesn't load)
</note>

<p>
  This api was built as part of the
  <b>Northcoders software development bootcamp</b> I attended. The project was
  to build an api which mimics a real world backend service for a news/blog
  website, which could then be used to provide information to frontend
  architecture.
</p>

<p>
  The design brief called for, amongst others, the following important endpoints
  to be created:
</p>

<ul>
  <li>
    <f>/api/article/:article_id</f> - responds with full details of the
    <b>requested article</b> from the articles table so a frontend can render
    it.
  </li>

  <li>
    <f>/api/articles</f> - returns a <b>list of articles</b> omitting the
    article body, so a frontend can display a list of links to articles. It
    accepts queries enabling it to <b>filter</b>, <b>sort</b> and
    <b>paginate</b> the results.
  </li>

  <li>
    <f>api/article/:article_id/comments</f> - provides a
    <b>list of comments</b> for a specific article. The comments have further
    endpoints for all <b>CRUD</b> actions, so a frontend may allow a user to
    manipulate their comments.
  </li>
</ul>

<p>
  Other endpoints exist for topic filtering and user profiles - a full list of
  endpoints can be found on the
  <a href="https://be-nc-news-nvms.onrender.com/api">/api endpoint</a>.
</p>

<p>
  The server response is in a <l>text/json</l> format. For example
  <f>/api/articles/1</f>:
</p>

<!--code
  {
    "article": {
      "article_id": 1,
      "title": "Running a Node App",
      "topic": "coding",
      "author": "jessjelly",
      "body": "This is part two of a series on how to get up and running with Systemd and Node.js. This part dives deeper into how to successfully run your app with systemd long-term, and how to set it up in a production environment.",
      "created_at": "2020-11-07T06:03:00.000Z",
      "votes": 1,
      "article_img_url": "https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg?w=700&h=700",
      "comment_count": 8
    }
  }
code-->
<caption>
  Example response from
  <c>api/article/:article_id</c>
  endpoint
</caption>

<h>Tech Stack</h>

<p>
  The project was built primarily using <l>Node.js/JavaScript</l>, and it
  focussed on some key backend topics from the bootcamp:
</p>

<ul>
  <li>
    <b>Test Driven Development</b> - the design of the api was centred around
    testing. Using the <l>Jest</l> npm package, a test suite describing the
    required behaviours of the endpoints was created. The api code was then
    written to satisfy these expected behaviours.
  </li>

  <li>
    <l>Express.js</l> - the project makes use of the express npm package. This
    framework allows the api to responds to different urls as well as easily
    processing parametric endpoints and url queries.
  </li>

  <li>
    <l>PostgreSQL</l> - the test data is stored in a PSQL database. The data can
    be manipulated for testing with jest, or manually with requests from an api
    tool like Insomnia.
  </li>

  <li>
    <b>GitHub</b> - the different endpoints of this api were completed as
    separate branches on GitHub, which were added to the main project branch via
    pull requests. This allowed different sections of the project to be worked
    on and reviewed a different times and in a different order to the provided
    tickets.
  </li>
</ul>

<h>Relational Databases</h>

<p>
  The database structure uses <b>one-to-many</b> relationships. For example,
  <b>one user</b> may have <b>many comments</b>, and their name would be stored
  with the comment data:
</p>

<img
  src="https://i.ibb.co/93c7wh3/backend-nc-news-1.jpg"
  alt="Hardcoded username"
/>

<caption>
  User details stored as string
</caption>

<p>
  If we choose to later change the user's display name, we don't want to change
  that name in every single comment. Instead, the user's details have a
  reference, such as an id or slug, that we can store. That way we aren't hard
  coding any of the user's data, only a reference to where it is stored:
</p>

<img
  src="https://i.ibb.co/J5JhTG1/backend-nc-news-2.jpg"
  alt="Referenced username"
/>

<caption>
  User details stored as reference to record
</caption>

<p>
  <l>PostgreSQL</l> is a good choice for this kind of database structure, as
  <l>SQL</l> facilitates the joining of tables by relationships to filter the
  required data.
</p>

<h>MVC Model</h>

<p>
  To keep the server easy to update and maintain, it uses the
  <b>Model-View-Controller</b> model. Alongside <b>endpoint routing</b>, this
  help to keep a <b>separation of concerns</b>, where specific components of the
  server perform specific tasks. In the
  <a href="https://github.com/robert-matthew-brooks/be-nc-news"
    >GitHub project</a
  >, these components can be found in the <f>/controller</f> and
  <f>/model</f> folders.
</p>

<img
  src="https://i.ibb.co/G7rsy4f/backend-nc-news-3.png"
  alt="MVC model diagram"
/>

<caption>
  MVC model diagram
</caption>

<ul>
  <li>
    The <b>model</b> processes the request, and queries the database to fetch,
    filter and sort any required data. It then passes the fetched data to the
    controller. The npm package <l>pg</l> is used to provide a worker pool to
    get data from the <l>PostgreSQL</l> database.
  </li>

  <li>
    The <b>controller</b> interacts with the model and the view - it processes
    the incoming request and passes the relevant information to the model, and
    then serves the model response to the client. <l>Express.js</l> is used as
    the server in this project.
  </li>

  <li>
    The <b>view</b> isn't part of this project - it will be the frontend of the
    external client that uses this api!
  </li>
</ul>

<h>Testing</h>

<p>
  I built a
  <a
    href="https://github.com/robert-matthew-brooks/be-nc-news/blob/main/__tests__/app.test.js"
    >test suite</a
  >
  using <l>Jest</l> while programming the server. The tests are important,
  because they ensure any changes to the project do not inadvertently break any
  required functionality of the code.
</p>

<p>The project uses test, development and production databases:</p>

<ul>
  <li>
    The <b>test database</b> simply needs to store the correct properties of the
    correct data type, which is primarily what the <b>unit tests</b> for each
    endpoint look for.
  </li>
  <li>
    The <b>development database</b> needs to be more substantial, and it
    simulates real looking data. In this project, I used <l>Insomnia</l> to test
    the endpoints of my server and observe the dev data.
  </li>
  <li>
    The <b>production database</b> stores real user data. Although this project
    was a proof of concept without 'real' users, tutors and friends interacted
    with the POST and PATCH message endpoints to interact and manipulate data on
    the prod database.
  </li>
</ul>

<p>
  I used the <l>dotenv</l> npm package as part of my
  <a
    href="https://github.com/robert-matthew-brooks/be-nc-news/blob/main/db/connection.js"
    >db connection script</a
  >. The <f>process.env.NODE_ENV</f> variable it is able to inform us which
  environment we are in and hence what database we require.
</p>

<p>
  The project also utilises <l>Husky</l>, which is another safeguard to ensure
  any pushed changes do not fail anything in the test suites.
</p>

<h>Outro</h>

<p>
  During this project, I learned and applied a lot of interesting concepts, most
  notably <b>test/dev data seeding</b>, <b>database architecture</b> and the
  <b>MVC server model</b>.
</p>
<p>
  I found the project also insightful into how apis provide data that can be
  shared to external clients. The next project in the course will be to build a
  frontend to handle user requests to the api and present the data!
</p>
